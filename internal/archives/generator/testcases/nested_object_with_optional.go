package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/internal/archives/generator"
	"gopkg.in/yaml.v3"
)

type nested_object_with_optional struct {
}

func init() {
	registerTestCase(&nested_object_with_optional{})
}

func (me *nested_object_with_optional) Name() string {
	return myfilename()
}

func (*nested_object_with_optional) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "Container",
		"type": "object",
		"properties": {
			"config": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"default": true
					},
					"count": {
						"type": "integer"
					}
				}
			}
		}
	}`
}

func (*nested_object_with_optional) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema: ptr("http://json-schema.org/draft-07/schema#"),
		Title:  ptr("Container"),
		Type:   typ("object"),
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "config",
				Value: &jsonschema.Schema{
					Type: typ("object"),
					Properties: &[]*jsonschema.NamedSchema{
						{
							Name: "enabled",
							Value: &jsonschema.Schema{
								Type: typ("boolean"),
								Default: &yaml.Node{
									Kind:  yaml.ScalarNode,
									Style: 0,
									Tag:   "!!bool",
									Value: "true",
								},
							},
						},
						{
							Name: "count",
							Value: &jsonschema.Schema{
								Type: typ("integer"),
							},
						},
					},
				},
			},
		},
	}
}

func (*nested_object_with_optional) StaticSchema() *generator.StaticSchema {
	configFields := []generator.Field{
		&generator.StaticField{
			Name_:                "Enabled",
			JSONName_:            "enabled",
			Description_:         "",
			IsRequired_:          false,
			Type_:                "*bool",
			DefaultValue_:        ptr("true"),
			DefaultValueComment_: ptr("true"),
		},
		&generator.StaticField{
			Name_:        "Count",
			JSONName_:    "count",
			Description_: "",
			IsRequired_:  false,
			Type_:        "*int",
		},
	}

	configStruct := &generator.StaticStruct{
		Name_:                "Config",
		Fields_:              configFields,
		HasDefaults_:         true,
		HasValidation_:       false,
		HasCustomMarshaling_: true,
	}

	containerFields := []generator.Field{
		&generator.StaticField{
			Name_:        "Config",
			JSONName_:    "config",
			Description_: "",
			IsRequired_:  false,
			Type_:        "*Config",
		},
	}

	containerStruct := &generator.StaticStruct{
		Name_:                "Container",
		Fields_:              containerFields,
		HasDefaults_:         false,
		HasValidation_:       false,
		HasCustomMarshaling_: true,
	}

	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			configStruct,
			containerStruct,
		},
		Imports_: []string{
			"encoding/json",
			"gitlab.com/tozd/go/errors",
		},
	}
}

func (*nested_object_with_optional) GoCode() string {
	return `
	// Code generated by schema2go. DO NOT EDIT.
	// üèóÔ∏è Generated from JSON Schema
	
	package models
	
	import (
		"encoding/json"
		"gitlab.com/tozd/go/errors"
	)
	
	type Config struct {
		Enabled *bool $$$json:"enabled,omitempty"$$$ // Default: true
		Count   *int  $$$json:"count,omitempty"$$$
	}
	
	type Container struct {
		Config *Config $$$json:"config,omitempty"$$$
	}
	`
}
