package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/internal/archives/generator"
)

type nested_object_deep struct{}

func init() {
	registerTestCase(&nested_object_deep{})
}

func (t *nested_object_deep) Name() string {
	return myfilename()
}

func (t *nested_object_deep) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "Location",
		"type": "object",
		"required": ["address"],
		"properties": {
			"address": {
				"type": "object",
				"required": ["coordinates"],
				"properties": {
					"coordinates": {
						"type": "object",
						"required": ["latitude", "longitude"],
						"properties": {
							"latitude": {
								"type": "number"
							},
							"longitude": {
								"type": "number"
							}
						}
					}
				}
			}
		}
	}`
}

func (t *nested_object_deep) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema: strPtr("http://json-schema.org/draft-07/schema#"),
		Title:  strPtr("Location"),
		Type:   typePtr("object"),
		Required: &[]string{
			"address",
		},
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "address",
				Value: &jsonschema.Schema{
					Type: typePtr("object"),
					Required: &[]string{
						"coordinates",
					},
					Properties: &[]*jsonschema.NamedSchema{
						{
							Name: "coordinates",
							Value: &jsonschema.Schema{
								Type: typePtr("object"),
								Required: &[]string{
									"latitude",
									"longitude",
								},
								Properties: &[]*jsonschema.NamedSchema{
									{
										Name: "latitude",
										Value: &jsonschema.Schema{
											Type: typePtr("number"),
										},
									},
									{
										Name: "longitude",
										Value: &jsonschema.Schema{
											Type: typePtr("number"),
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func (t *nested_object_deep) StaticSchema() *generator.StaticSchema {
	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			&generator.StaticStruct{
				Name_:        "LocationAddressCoordinates",
				Description_: "",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "Latitude",
						JSONName_:            "latitude",
						Description_:         "Required",
						IsRequired_:          true,
						Type_:                "float64",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
					&generator.StaticField{
						Name_:                "Longitude",
						JSONName_:            "longitude",
						Description_:         "Required",
						IsRequired_:          true,
						Type_:                "float64",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       true,
			},
			&generator.StaticStruct{
				Name_:        "LocationAddress",
				Description_: "",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "Coordinates",
						JSONName_:            "coordinates",
						Description_:         "Required",
						IsRequired_:          true,
						Type_:                "LocationAddressCoordinates",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       true,
			},
			&generator.StaticStruct{
				Name_:        "Location",
				Description_: "",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "Address",
						JSONName_:            "address",
						Description_:         "Required",
						IsRequired_:          true,
						Type_:                "LocationAddress",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       true,
			},
		},
	}
}

func (t *nested_object_deep) GoCode() string {
	return `// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package models

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

type LocationAddressCoordinates struct {
	Latitude  float64 $$$json:"latitude"$$$  // Required
	Longitude float64 $$$json:"longitude"$$$ // Required
}

// Validate ensures all required fields are present
func (x *LocationAddressCoordinates) Validate() error {
	return nil
}

type LocationAddress struct {
	Coordinates LocationAddressCoordinates $$$json:"coordinates"$$$ // Required
}

// Validate ensures all required fields are present
func (x *LocationAddress) Validate() error {
	if err := x.Coordinates.Validate(); err != nil {
		return errors.Errorf("validating coordinates: %w", err)
	}
	return nil
}

type Location struct {
	Address LocationAddress $$$json:"address"$$$ // Required
}

// Validate ensures all required fields are present
func (x *Location) Validate() error {
	if err := x.Address.Validate(); err != nil {
		return errors.Errorf("validating address: %w", err)
	}
	return nil
}`
}
