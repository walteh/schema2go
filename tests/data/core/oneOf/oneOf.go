// Code generated by github.com/walteh/schema2go, DO NOT EDIT.

package simple

import (
	"encoding/json"
	"errors"
	"fmt"
)

type Circle struct {
	// ShapeColor corresponds to the JSON schema field "color".
	ShapeColor string `json:"color" yaml:"color" mapstructure:"color"`

	// Radius corresponds to the JSON schema field "radius".
	Radius float64 `json:"radius" yaml:"radius" mapstructure:"radius"`
}

func (j *Circle) Color() string {
	return j.ShapeColor
}

func (j *Circle) Type() ShapeType {
	return ShapeTypeCircle
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Circle) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["color"]; raw != nil && !ok {
		return fmt.Errorf("field color in Circle: required")
	}
	if _, ok := raw["radius"]; raw != nil && !ok {
		return fmt.Errorf("field radius in Circle: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Circle: required")
	}
	type Plain Circle
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Circle(plain)
	return nil
}

type House struct {
	// Base corresponds to the JSON schema field "base".
	Base Shape `json:"base" yaml:"base" mapstructure:"base"`

	// Roof corresponds to the JSON schema field "roof".
	Roof Shape `json:"roof" yaml:"roof" mapstructure:"roof"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *House) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["base"]; raw != nil && !ok {
		return fmt.Errorf("field base in House: required")
	}
	if _, ok := raw["roof"]; raw != nil && !ok {
		return fmt.Errorf("field roof in House: required")
	}
	type Plain House
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, err := parseUnknownShape(plain.Base); err != nil {
		return err
	} else {
		plain.Base = v
	}
	if v, err := parseUnknownShape(plain.Roof); err != nil {
		return err
	} else {
		plain.Roof = v
	}
	*j = House(plain)
	return nil
}

type Shape interface {
	Type() ShapeType
	Color() string
}


func parseUnknownShape(raw interface{}) (Shape, error) {

	if raw == nil {
		return nil, nil
	}

	shapes := []Shape{
		(*Circle)(nil),
		(*Square)(nil),
		(*Triangle)(nil),
	}

	errs := []error{}

	for _, shape := range shapes {
		str, err := json.Marshal(shape)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(str, raw)
		if err != nil {
			errs = append(errs, fmt.Errorf("failed to unmarshal %T: %w", shape, err))
			continue
		}
		return shape, nil
	}

	return nil, fmt.Errorf("no matching shape found: %w", errors.Join(errs...))
}

type ShapeType string

const (
	ShapeTypeCircle ShapeType = "circle"
	ShapeTypeSquare ShapeType = "square"
	ShapeTypeTriangle ShapeType = "triangle"
)


type Square struct {
	// ShapeColor corresponds to the JSON schema field "color".
	ShapeColor string `json:"color" yaml:"color" mapstructure:"color"`

	// Side corresponds to the JSON schema field "side".
	Side float64 `json:"side" yaml:"side" mapstructure:"side"`
}

func (j *Square) Color() string {
	return j.ShapeColor
}

func (j *Square) Type() ShapeType {
	return ShapeTypeSquare
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Square) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["color"]; raw != nil && !ok {
		return fmt.Errorf("field color in Square: required")
	}
	if _, ok := raw["side"]; raw != nil && !ok {
		return fmt.Errorf("field side in Square: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Square: required")
	}
	type Plain Square
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Square(plain)
	return nil
}

type Triangle struct {
	// Base corresponds to the JSON schema field "base".
	Base float64 `json:"base" yaml:"base" mapstructure:"base"`

	// ShapeColor corresponds to the JSON schema field "color".
	ShapeColor string `json:"color" yaml:"color" mapstructure:"color"`

	// Height corresponds to the JSON schema field "height".
	Height float64 `json:"height" yaml:"height" mapstructure:"height"`
}

func (j *Triangle) Color() string {
	return j.ShapeColor
}

func (j *Triangle) Type() ShapeType {
	return ShapeTypeTriangle
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Triangle) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["base"]; raw != nil && !ok {
		return fmt.Errorf("field base in Triangle: required")
	}
	if _, ok := raw["color"]; raw != nil && !ok {
		return fmt.Errorf("field color in Triangle: required")
	}
	if _, ok := raw["height"]; raw != nil && !ok {
		return fmt.Errorf("field height in Triangle: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Triangle: required")
	}
	type Plain Triangle
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Triangle(plain)
	return nil
}
