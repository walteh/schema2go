// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	mock "github.com/stretchr/testify/mock"
	generator "github.com/walteh/schema2go/internal/archives/generator"
)

// MockSchema_generator is an autogenerated mock type for the Schema type
type MockSchema_generator struct {
	mock.Mock
}

type MockSchema_generator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchema_generator) EXPECT() *MockSchema_generator_Expecter {
	return &MockSchema_generator_Expecter{mock: &_m.Mock}
}

// Enums provides a mock function with no fields
func (_m *MockSchema_generator) Enums() []*generator.EnumModel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enums")
	}

	var r0 []*generator.EnumModel
	if rf, ok := ret.Get(0).(func() []*generator.EnumModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*generator.EnumModel)
		}
	}

	return r0
}

// MockSchema_generator_Enums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enums'
type MockSchema_generator_Enums_Call struct {
	*mock.Call
}

// Enums is a helper method to define mock.On call
func (_e *MockSchema_generator_Expecter) Enums() *MockSchema_generator_Enums_Call {
	return &MockSchema_generator_Enums_Call{Call: _e.mock.On("Enums")}
}

func (_c *MockSchema_generator_Enums_Call) Run(run func()) *MockSchema_generator_Enums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_generator_Enums_Call) Return(_a0 []*generator.EnumModel) *MockSchema_generator_Enums_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchema_generator_Enums_Call) RunAndReturn(run func() []*generator.EnumModel) *MockSchema_generator_Enums_Call {
	_c.Call.Return(run)
	return _c
}

// Imports provides a mock function with no fields
func (_m *MockSchema_generator) Imports() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Imports")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockSchema_generator_Imports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Imports'
type MockSchema_generator_Imports_Call struct {
	*mock.Call
}

// Imports is a helper method to define mock.On call
func (_e *MockSchema_generator_Expecter) Imports() *MockSchema_generator_Imports_Call {
	return &MockSchema_generator_Imports_Call{Call: _e.mock.On("Imports")}
}

func (_c *MockSchema_generator_Imports_Call) Run(run func()) *MockSchema_generator_Imports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_generator_Imports_Call) Return(_a0 []string) *MockSchema_generator_Imports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchema_generator_Imports_Call) RunAndReturn(run func() []string) *MockSchema_generator_Imports_Call {
	_c.Call.Return(run)
	return _c
}

// Package provides a mock function with no fields
func (_m *MockSchema_generator) Package() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Package")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSchema_generator_Package_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Package'
type MockSchema_generator_Package_Call struct {
	*mock.Call
}

// Package is a helper method to define mock.On call
func (_e *MockSchema_generator_Expecter) Package() *MockSchema_generator_Package_Call {
	return &MockSchema_generator_Package_Call{Call: _e.mock.On("Package")}
}

func (_c *MockSchema_generator_Package_Call) Run(run func()) *MockSchema_generator_Package_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_generator_Package_Call) Return(_a0 string) *MockSchema_generator_Package_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchema_generator_Package_Call) RunAndReturn(run func() string) *MockSchema_generator_Package_Call {
	_c.Call.Return(run)
	return _c
}

// Structs provides a mock function with no fields
func (_m *MockSchema_generator) Structs() []generator.Struct {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Structs")
	}

	var r0 []generator.Struct
	if rf, ok := ret.Get(0).(func() []generator.Struct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generator.Struct)
		}
	}

	return r0
}

// MockSchema_generator_Structs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Structs'
type MockSchema_generator_Structs_Call struct {
	*mock.Call
}

// Structs is a helper method to define mock.On call
func (_e *MockSchema_generator_Expecter) Structs() *MockSchema_generator_Structs_Call {
	return &MockSchema_generator_Structs_Call{Call: _e.mock.On("Structs")}
}

func (_c *MockSchema_generator_Structs_Call) Run(run func()) *MockSchema_generator_Structs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_generator_Structs_Call) Return(_a0 []generator.Struct) *MockSchema_generator_Structs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchema_generator_Structs_Call) RunAndReturn(run func() []generator.Struct) *MockSchema_generator_Structs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchema_generator creates a new instance of MockSchema_generator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchema_generator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchema_generator {
	mock := &MockSchema_generator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
