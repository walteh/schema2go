// Code generated by statictypes.go; DO NOT EDIT.

package generator

{{ range $iface := .Interfaces }}
var _ {{ $iface.Name }} = &Static{{ $iface.Name }}{}

type Static{{ $iface.Name }} struct {
	{{- range $method := $iface.Methods }}
	{{ $method.Name }}_ {{ $method.ReturnType }}
	{{- end }}
}

{{ range $method := $iface.Methods }}
// {{ $method.Name }} implements {{ $iface.Name }}.
func (b *Static{{ $iface.Name }}) {{ $method.Name }}() {{ $method.ReturnType }} {
	return b.{{ $method.Name }}_
}
{{ end }}
{{ end }}

{{ range $iface := .Interfaces }}
func NewStatic{{ $iface.Name }}(impl {{ $iface.Name }}) *Static{{ $iface.Name }} {
	stat := &Static{{ $iface.Name }}{}

	{{ range $method := $iface.Methods }}
	{{- if eq (slice $method.ReturnType 0 2) "[]" }}
	// Handle slice of objects
	{{- if isKnownType (trimPrefix $method.ReturnType "[]") }}
	var static{{ $method.Name }}_ []{{ trimPrefix $method.ReturnType "[]" }}
	for _, item := range impl.{{ $method.Name }}() {
		static{{ $method.Name }}_ = append(static{{ $method.Name }}_, NewStatic{{ trimPrefix $method.ReturnType "[]" }}(item))
	}
	stat.{{ $method.Name }}_ = static{{ $method.Name }}_
	{{- else }}
	stat.{{ $method.Name }}_ = impl.{{ $method.Name }}()
	{{- end }}
	{{- else if isKnownType $method.ReturnType }}
	// Handle single object
	stat.{{ $method.Name }}_ = NewStatic{{ $method.ReturnType }}(impl.{{ $method.Name }}())
	{{- else }}
	stat.{{ $method.Name }}_ = impl.{{ $method.Name }}()
	{{- end }}
	{{ end }}

	return stat
}
{{ end }}