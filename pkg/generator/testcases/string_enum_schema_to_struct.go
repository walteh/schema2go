package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/pkg/generator"
	"gopkg.in/yaml.v3"
)

type string_enum_schema_to_struct struct {
}

func init() {
	registerTestCase(&string_enum_schema_to_struct{})
}

func (me *string_enum_schema_to_struct) Name() string {
	return myfilename()
}

func (*string_enum_schema_to_struct) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "ColorConfig",
		"type": "object",
		"properties": {
			"primaryColor": {
				"type": "string",
				"enum": ["red", "green", "blue"]
			},
			"theme": {
				"type": "string",
				"enum": ["light", "dark"],
				"default": "light"
			}
		}
	}`
}

func (*string_enum_schema_to_struct) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema: ptr("http://json-schema.org/draft-07/schema#"),
		Title:  ptr("ColorConfig"),
		Type:   typ("object"),
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "primaryColor",
				Value: &jsonschema.Schema{
					Type: typ("string"),
					Enumeration: &[]jsonschema.SchemaEnumValue{
						{String: ptr("red")},
						{String: ptr("green")},
						{String: ptr("blue")},
					},
				},
			},
			{
				Name: "theme",
				Value: &jsonschema.Schema{
					Type: typ("string"),
					Enumeration: &[]jsonschema.SchemaEnumValue{
						{String: ptr("light")},
						{String: ptr("dark")},
					},
					Default: &yaml.Node{
						Kind:  yaml.ScalarNode,
						Style: 0,
						Tag:   "!!str",
						Value: "light",
					},
				},
			},
		},
	}
}

func (*string_enum_schema_to_struct) StaticSchema() *generator.StaticSchema {
	colorTypeEnum := []generator.EnumValue{
		{Name: "ColorTypeRed", Value: "red"},
		{Name: "ColorTypeGreen", Value: "green"},
		{Name: "ColorTypeBlue", Value: "blue"},
	}

	themeTypeEnum := []generator.EnumValue{
		{Name: "ThemeTypeLight", Value: "light"},
		{Name: "ThemeTypeDark", Value: "dark"},
	}

	colorConfigFields := []generator.Field{
		&generator.StaticField{
			Name_:         "PrimaryColor",
			JSONName_:     "primaryColor",
			Description_:  "",
			IsRequired_:   false,
			Type_:         "*ColorType",
			IsEnum_:       true,
			EnumTypeName_: "ColorType",
			EnumValues_:   colorTypeEnum,
		},
		&generator.StaticField{
			Name_:                "Theme",
			JSONName_:            "theme",
			Description_:         "",
			IsRequired_:          false,
			Type_:                "*ThemeType",
			IsEnum_:              true,
			EnumTypeName_:        "ThemeType",
			EnumValues_:          themeTypeEnum,
			DefaultValue_:        ptr("ThemeTypeLight"),
			DefaultValueComment_: ptr("light"),
		},
	}

	colorConfigStruct := &generator.StaticStruct{
		Name_:                "ColorConfig",
		Fields_:              colorConfigFields,
		HasDefaults_:         true,
		HasValidation_:       true,
		HasCustomMarshaling_: true,
	}

	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{colorConfigStruct},
		Enums_: []generator.EnumModel{
			{
				Name:     "ColorType",
				BaseType: "string",
				Values: []generator.EnumValue{
					{Name: "ColorTypeRed", Value: "red"},
					{Name: "ColorTypeGreen", Value: "green"},
					{Name: "ColorTypeBlue", Value: "blue"},
				},
			},
			{
				Name:     "ThemeType",
				BaseType: "string",
				Values: []generator.EnumValue{
					{Name: "ThemeTypeLight", Value: "light"},
					{Name: "ThemeTypeDark", Value: "dark"},
				},
			},
		},
		Imports_: []string{
			"encoding/json",
			"gitlab.com/tozd/go/errors",
		},
	}
}

func (*string_enum_schema_to_struct) GoCode() string {
	return `
	// Code generated by schema2go. DO NOT EDIT.
	// üèóÔ∏è Generated from JSON Schema
	
	package models
	
	import (
		"encoding/json"
		"gitlab.com/tozd/go/errors"
	)
	
	type ColorType string
	
	const (
		ColorTypeRed   ColorType = "red"
		ColorTypeGreen ColorType = "green"
		ColorTypeBlue  ColorType = "blue"
	)
	
	type ThemeType string
	
	const (
		ThemeTypeLight ThemeType = "light"
		ThemeTypeDark  ThemeType = "dark"
	)
	
	type ColorConfig struct {
		PrimaryColor *ColorType $$$json:"primaryColor,omitempty"$$$
		Theme        *ThemeType $$$json:"theme,omitempty"$$$ // Default: light
	}
	
	// UnmarshalJSON implements json.Unmarshaler
	func (x *ColorConfig) UnmarshalJSON(data []byte) error {
		// Define an alias to prevent recursive UnmarshalJSON calls
		type Alias ColorConfig
		aux := &struct {
			*Alias
		}{
			Alias: (*Alias)(x),
		}
		if err := json.Unmarshal(data, &aux); err != nil {
			return errors.Errorf("unmarshaling json: %w", err)
		}
	
		// Apply defaults for missing fields
		if x.Theme == nil {
			defaultValue := ThemeTypeLight
			x.Theme = &defaultValue
		}
	
		// Validate after applying defaults
		if err := x.Validate(); err != nil {
			return errors.Errorf("validating after unmarshal: %w", err)
		}
	
		return nil
	}
	
	// Validate ensures all required fields are present and valid
	func (x *ColorConfig) Validate() error {
		if x.PrimaryColor != nil {
			switch *x.PrimaryColor {
			case ColorTypeRed, ColorTypeGreen, ColorTypeBlue:
			default:
				return errors.New("invalid primaryColor")
			}
		}
		if x.Theme != nil {
			switch *x.Theme {
			case ThemeTypeLight, ThemeTypeDark:
			default:
				return errors.New("invalid theme")
			}
		}
		return nil
	}
	
	// MarshalJSON implements json.Marshaler
	func (x ColorConfig) MarshalJSON() ([]byte, error) {
		// Validate before marshaling
		if err := x.Validate(); err != nil {
			return nil, errors.Errorf("validating before marshal: %w", err)
		}
	
		// Use alias to avoid infinite recursion
		type Alias ColorConfig
		return json.Marshal((*Alias)(&x))
	}
	`
}
