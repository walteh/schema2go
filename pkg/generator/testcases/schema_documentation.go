package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/pkg/generator"
)

type schema_documentation struct{}

func (t *schema_documentation) Name() string {
	return "schema_documentation"
}

func (t *schema_documentation) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "DocumentedExample",
		"description": "A thoroughly documented example schema",
		"type": "object",
		"properties": {
			"field1": {
				"type": "string",
				"description": "A well documented string field",
				"examples": ["example1", "example2"]
			},
			"nested": {
				"type": "object",
				"description": "A nested object with its own documentation",
				"properties": {
					"subField": {
						"type": "integer",
						"description": "A documented integer field",
						"minimum": 0,
						"maximum": 100
					}
				}
			}
		}
	}`
}

func (t *schema_documentation) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema:      strPtr("http://json-schema.org/draft-07/schema#"),
		Title:       strPtr("DocumentedExample"),
		Description: strPtr("A thoroughly documented example schema"),
		Type:        typePtr("object"),
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "field1",
				Value: &jsonschema.Schema{
					Type:          typePtr("string"),
					Description:   strPtr("A well documented string field"),
					ExampleValues: &[]interface{}{"example1", "example2"},
				},
			},
			{
				Name: "nested",
				Value: &jsonschema.Schema{
					Type:        typePtr("object"),
					Description: strPtr("A nested object with its own documentation"),
					Properties: &[]*jsonschema.NamedSchema{
						{
							Name: "subField",
							Value: &jsonschema.Schema{
								Type:        typePtr("integer"),
								Description: strPtr("A documented integer field"),
								MinValue:    float64Ptr(0),
								MaxValue:    float64Ptr(100),
							},
						},
					},
				},
			},
		},
	}
}

func float64Ptr(v float64) *float64 {
	return &v
}

func (t *schema_documentation) StaticSchema() *generator.StaticSchema {
	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			&generator.StaticStruct{
				Name_:        "DocumentedExample",
				Description_: "A thoroughly documented example schema",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "Field1",
						JSONName_:            "field1",
						Description_:         "A well documented string field\nExamples: [\"example1\", \"example2\"]",
						IsRequired_:          false,
						Type_:                "*string",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
					&generator.StaticField{
						Name_:                "Nested",
						JSONName_:            "nested",
						Description_:         "A nested object with its own documentation",
						IsRequired_:          false,
						Type_:                "*DocumentedExample_Nested",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       false,
			},
			&generator.StaticStruct{
				Name_:        "DocumentedExample_Nested",
				Description_: "represents the nested object in DocumentedExample",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "SubField",
						JSONName_:            "subField",
						Description_:         "A documented integer field\nRange: [0, 100]",
						IsRequired_:          false,
						Type_:                "*int",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       false,
			},
		},
	}
}

func (t *schema_documentation) GoCode() string {
	return `// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package models

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

// DocumentedExample represents a thoroughly documented example schema
type DocumentedExample struct {
	// A well documented string field
	// Examples: ["example1", "example2"]
	Field1 *string $$$json:"field1,omitempty"$$$

	// A nested object with its own documentation
	Nested *DocumentedExample_Nested $$$json:"nested,omitempty"$$$
}

// DocumentedExample_Nested represents the nested object in DocumentedExample
type DocumentedExample_Nested struct {
	// A documented integer field
	// Range: [0, 100]
	SubField *int $$$json:"subField,omitempty"$$$
}`
}
