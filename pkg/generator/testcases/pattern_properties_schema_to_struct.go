package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/pkg/generator"
)

type pattern_properties_schema_to_struct struct{}

func (t *pattern_properties_schema_to_struct) Name() string {
	return myfilename()
}

func (t *pattern_properties_schema_to_struct) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "DynamicConfig",
		"type": "object",
		"description": "Configuration with dynamic field names following specific patterns",
		"patternProperties": {
			"^S_": {
				"type": "string",
				"description": "String fields must start with S_ prefix (e.g., S_name, S_description)"
			},
			"^N_": {
				"type": "number",
				"description": "Number fields must start with N_ prefix (e.g., N_count, N_ratio)"
			}
		},
		"additionalProperties": false
	}`
}

func (t *pattern_properties_schema_to_struct) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema:      strPtr("http://json-schema.org/draft-07/schema#"),
		Title:       strPtr("DynamicConfig"),
		Type:        typePtr("object"),
		Description: strPtr("Configuration with dynamic field names following specific patterns"),
		PatternProperties: &[]*jsonschema.NamedSchema{
			{
				Name: "^S_",
				Value: &jsonschema.Schema{
					Type:        typePtr("string"),
					Description: strPtr("String fields must start with S_ prefix (e.g., S_name, S_description)"),
				},
			},
			{
				Name: "^N_",
				Value: &jsonschema.Schema{
					Type:        typePtr("number"),
					Description: strPtr("Number fields must start with N_ prefix (e.g., N_count, N_ratio)"),
				},
			},
		},
		AdditionalProperties: &jsonschema.SchemaOrBoolean{
			Schema:  nil,
			Boolean: boolPtr(false),
		},
	}
}

func boolPtr(b bool) *bool {
	return &b
}

func (t *pattern_properties_schema_to_struct) StaticSchema() *generator.StaticSchema {
	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			&generator.StaticStruct{
				Name_:        "DynamicConfig",
				Description_: "Configuration with dynamic field names following specific patterns",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "StringFields_Pattern",
						JSONName_:            "-",
						Description_:         "String fields must start with S_ prefix (e.g., S_name, S_description)",
						IsRequired_:          false,
						Type_:                "map[string]string",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
					&generator.StaticField{
						Name_:                "NumberFields_Pattern",
						JSONName_:            "-",
						Description_:         "Number fields must start with N_ prefix (e.g., N_count, N_ratio)",
						IsRequired_:          false,
						Type_:                "map[string]float64",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: true,
				HasDefaults_:         false,
				HasValidation_:       true,
			},
		},
	}
}

func (t *pattern_properties_schema_to_struct) GoCode() string {
	return `// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package models

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

// DynamicConfig represents a configuration with dynamic field names following specific patterns
type DynamicConfig struct {
	// String fields must start with S_ prefix (e.g., S_name, S_description)
	StringFields_Pattern map[string]string $$$json:"-"$$$

	// Number fields must start with N_ prefix (e.g., N_count, N_ratio)
	NumberFields_Pattern map[string]float64 $$$json:"-"$$$
}

func (d *DynamicConfig) UnmarshalJSON(data []byte) error {
	// TODO: Implement pattern-based unmarshaling
	// 1. Parse raw JSON into map[string]interface{}
	// 2. For each key-value pair:
	//    - If key starts with S_, validate value is string and add to StringFields
	//    - If key starts with N_, validate value is number and add to NumberFields
	//    - Otherwise, return error for invalid pattern
	return nil
}

func (d DynamicConfig) MarshalJSON() ([]byte, error) {
	// TODO: Implement pattern-based marshaling
	// 1. Create output map combining both field maps
	// 2. Validate all keys follow required patterns
	// 3. Marshal to JSON
	return nil, nil
}

func (d *DynamicConfig) Validate() error {
	// Validate string field patterns
	for key := range d.StringFields_Pattern {
		if !strings.HasPrefix(key, "S_") {
			return errors.Errorf("invalid string field key %q: must start with S_", key)
		}
	}

	// Validate number field patterns
	for key := range d.NumberFields_Pattern {
		if !strings.HasPrefix(key, "N_") {
			return errors.Errorf("invalid number field key %q: must start with N_", key)
		}
	}
	return nil
}`
}
