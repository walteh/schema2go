package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/pkg/generator"
)

type nested_object_simple struct {
}

func init() {
	registerTestCase(&nested_object_simple{})
}

func (me *nested_object_simple) Name() string {
	return myfilename()
}

func (*nested_object_simple) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "Parent",
		"type": "object",
		"required": ["child"],
		"properties": {
			"child": {
				"type": "object",
				"required": ["name"],
				"properties": {
					"name": {
						"type": "string"
					}
				}
			}
		}
	}`
}

func (*nested_object_simple) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema: ptr("http://json-schema.org/draft-07/schema#"),
		Title:  ptr("Parent"),
		Type:   typ("object"),
		Required: &[]string{
			"child",
		},
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "child",
				Value: &jsonschema.Schema{
					Type: typ("object"),
					Required: &[]string{
						"name",
					},
					Properties: &[]*jsonschema.NamedSchema{
						{
							Name: "name",
							Value: &jsonschema.Schema{
								Type: typ("string"),
							},
						},
					},
				},
			},
		},
	}
}

func (*nested_object_simple) StaticSchema() *generator.StaticSchema {
	childFields := []generator.Field{
		&generator.StaticField{
			Name_:        "Name",
			JSONName_:    "name",
			Description_: "",
			IsRequired_:  true,
			Type_:        "string",
			ValidationRules_: []generator.ValidationRule{
				{
					Type:    generator.ValidationRequired,
					Message: "name is required",
				},
			},
		},
	}

	childStruct := &generator.StaticStruct{
		Name_:                "ParentChild",
		Fields_:              childFields,
		HasDefaults_:         false,
		HasValidation_:       true,
		HasCustomMarshaling_: true,
	}

	parentFields := []generator.Field{
		&generator.StaticField{
			Name_:        "Child",
			JSONName_:    "child",
			Description_: "",
			IsRequired_:  true,
			Type_:        "ParentChild",
			ValidationRules_: []generator.ValidationRule{
				{
					Type:    generator.ValidationRequired,
					Message: "child is required",
				},
				{
					Type:    generator.ValidationNested,
					Message: "validating child",
				},
			},
		},
	}

	parentStruct := &generator.StaticStruct{
		Name_:                "Parent",
		Fields_:              parentFields,
		HasDefaults_:         false,
		HasValidation_:       true,
		HasCustomMarshaling_: true,
	}

	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			parentStruct,
			childStruct,
		},
		Imports_: []string{
			"encoding/json",
			"gitlab.com/tozd/go/errors",
		},
	}
}

func (*nested_object_simple) GoCode() string {
	return `
	// Code generated by schema2go. DO NOT EDIT.
	// üèóÔ∏è Generated from JSON Schema
	
	package models
	
	import (
		"encoding/json"
		"gitlab.com/tozd/go/errors"
	)
	
	type Parent struct {
		Child ParentChild $$$json:"child"$$$ // Required
	}
	
	// UnmarshalJSON implements json.Unmarshaler
	func (x *Parent) UnmarshalJSON(data []byte) error {
		// Create an alias to avoid infinite recursion
		type Alias Parent
		aux := &struct {
			*Alias
		}{
			Alias: (*Alias)(x),
		}
	
		// First unmarshal into our alias struct
		if err := json.Unmarshal(data, &aux); err != nil {
			return errors.Errorf("unmarshaling json: %w", err)
		}
	
		// Validate after unmarshaling
		if err := x.Validate(); err != nil {
			return errors.Errorf("validating after unmarshal: %w", err)
		}
	
		return nil
	}
	
	// Validate ensures all required fields are present and valid
	func (x *Parent) Validate() error {
		if x.Child != nil {
			if err := x.Child.Validate(); err != nil {
				return errors.Errorf("validating child: %w", err)
			}
		}
		return nil
	}
	
	// MarshalJSON implements json.Marshaler
	func (x Parent) MarshalJSON() ([]byte, error) {
		// Validate before marshaling
		if err := x.Validate(); err != nil {
			return nil, errors.Errorf("validating before marshal: %w", err)
		}
	
		// Use alias to avoid infinite recursion
		type Alias Parent
		return json.Marshal((*Alias)(&x))
	}
	
	type ParentChild struct {
		Name string $$$json:"name"$$$ // Required
	}
	
	// UnmarshalJSON implements json.Unmarshaler
	func (x *ParentChild) UnmarshalJSON(data []byte) error {
		// Create an alias to avoid infinite recursion
		type Alias ParentChild
		aux := &struct {
			*Alias
		}{
			Alias: (*Alias)(x),
		}
	
		// First unmarshal into our alias struct
		if err := json.Unmarshal(data, &aux); err != nil {
			return errors.Errorf("unmarshaling json: %w", err)
		}
	
		// Validate after unmarshaling
		if err := x.Validate(); err != nil {
			return errors.Errorf("validating after unmarshal: %w", err)
		}
	
		return nil
	}
	
	// Validate ensures all required fields are present and valid
	func (x *ParentChild) Validate() error {
		if x.Name == "" {
			return errors.New("name is required")
		}
		return nil
	}
	
	// MarshalJSON implements json.Marshaler
	func (x ParentChild) MarshalJSON() ([]byte, error) {
		// Validate before marshaling
		if err := x.Validate(); err != nil {
			return nil, errors.Errorf("validating before marshal: %w", err)
		}
	
		// Use alias to avoid infinite recursion
		type Alias ParentChild
		return json.Marshal((*Alias)(&x))
	}
	`
}
