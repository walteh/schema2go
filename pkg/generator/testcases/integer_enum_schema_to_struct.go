package testcases

import (
	"github.com/google/gnostic/jsonschema"
	"github.com/walteh/schema2go/pkg/generator"
)

type integer_enum_schema_to_struct struct{}

func (t *integer_enum_schema_to_struct) Name() string {
	return "integer_enum_schema_to_struct"
}

func (t *integer_enum_schema_to_struct) JSONSchema() string {
	return `{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"title": "HttpConfig",
		"type": "object",
		"properties": {
			"port": {
				"type": "integer",
				"enum": [80, 443, 8080, 8443]
			},
			"status": {
				"type": "integer",
				"enum": [200, 404, 500]
			}
		}
	}`
}

func (t *integer_enum_schema_to_struct) RawSchema() *jsonschema.Schema {
	return &jsonschema.Schema{
		Schema: strPtr("http://json-schema.org/draft-07/schema#"),
		Title:  strPtr("HttpConfig"),
		Type:   typePtr("object"),
		Properties: &[]*jsonschema.NamedSchema{
			{
				Name: "port",
				Value: &jsonschema.Schema{
					Type: typePtr("integer"),
					Enumeration: &[]jsonschema.SchemaEnumValue{
						{String: strPtr("80")},
						{String: strPtr("443")},
						{String: strPtr("8080")},
						{String: strPtr("8443")},
					},
				},
			},
			{
				Name: "status",
				Value: &jsonschema.Schema{
					Type: typePtr("integer"),
					Enumeration: &[]jsonschema.SchemaEnumValue{
						{String: strPtr("200")},
						{String: strPtr("404")},
						{String: strPtr("500")},
					},
				},
			},
		},
	}
}

func (t *integer_enum_schema_to_struct) StaticSchema() *generator.StaticSchema {
	return &generator.StaticSchema{
		Package_: "models",
		Structs_: []generator.Struct{
			&generator.StaticStruct{
				Name_:        "PortType",
				Description_: "",
				Fields_:      nil,
				IsEnum_:      true,
				EnumType_:    "int",
				EnumValues_: []generator.EnumValue{
					{
						Name:  "PortType80",
						Value: "80",
					},
					{
						Name:  "PortType443",
						Value: "443",
					},
					{
						Name:  "PortType8080",
						Value: "8080",
					},
					{
						Name:  "PortType8443",
						Value: "8443",
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       false,
			},
			&generator.StaticStruct{
				Name_:        "StatusType",
				Description_: "",
				Fields_:      nil,
				IsEnum_:      true,
				EnumType_:    "int",
				EnumValues_: []generator.EnumValue{
					{
						Name:  "StatusType200",
						Value: "200",
					},
					{
						Name:  "StatusType404",
						Value: "404",
					},
					{
						Name:  "StatusType500",
						Value: "500",
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: false,
				HasDefaults_:         false,
				HasValidation_:       false,
			},
			&generator.StaticStruct{
				Name_:        "HttpConfig",
				Description_: "",
				Fields_: []generator.Field{
					&generator.StaticField{
						Name_:                "Port",
						JSONName_:            "port",
						Description_:         "",
						IsRequired_:          false,
						Type_:                "*PortType",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
					&generator.StaticField{
						Name_:                "Status",
						JSONName_:            "status",
						Description_:         "",
						IsRequired_:          false,
						Type_:                "*StatusType",
						IsEnum_:              false,
						EnumTypeName_:        "",
						EnumValues_:          nil,
						DefaultValue_:        nil,
						DefaultValueComment_: nil,
						ValidationRules_:     nil,
					},
				},
				HasAllOf_:            false,
				HasCustomMarshaling_: true,
				HasDefaults_:         false,
				HasValidation_:       true,
			},
		},
	}
}

func (t *integer_enum_schema_to_struct) GoCode() string {
	return `// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package models

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

type PortType int

const (
	PortType80   PortType = 80
	PortType443  PortType = 443
	PortType8080 PortType = 8080
	PortType8443 PortType = 8443
)

type StatusType int

const (
	StatusType200 StatusType = 200
	StatusType404 StatusType = 404
	StatusType500 StatusType = 500
)

type HttpConfig struct {
	Port   *PortType   $$$json:"port,omitempty"$$$
	Status *StatusType $$$json:"status,omitempty"$$$
}

func (x *HttpConfig) UnmarshalJSON(data []byte) error {
	type Alias HttpConfig
	aux := &struct {
		*Alias
	}{
		Alias: (*Alias)(x),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return errors.Errorf("unmarshaling json: %w", err)
	}

	if err := x.Validate(); err != nil {
		return errors.Errorf("validating after unmarshal: %w", err)
	}

	return nil
}

// Validate ensures all required fields are present and valid
func (x *HttpConfig) Validate() error {
	if x.Port != nil {
		switch *x.Port {
		case PortType80, PortType443, PortType8080, PortType8443:
		default:
			return errors.New("invalid port")
		}
	}
	if x.Status != nil {
		switch *x.Status {
		case StatusType200, StatusType404, StatusType500:
		default:
			return errors.New("invalid status")
		}
	}
	return nil
}

// MarshalJSON implements json.Marshaler
func (x HttpConfig) MarshalJSON() ([]byte, error) {
	// Validate before marshaling
	if err := x.Validate(); err != nil {
		return nil, errors.Errorf("validating before marshal: %w", err)
	}

	// Use alias to avoid infinite recursion
	type Alias HttpConfig
	return json.Marshal((*Alias)(&x))
}`
}
