{{/* 
‚ö†Ô∏è TEMPLATE MODIFICATION WARNING ‚ö†Ô∏è
1. Any changes to this template must be made with extreme caution
2. ALWAYS run passing tests before AND after any changes
3. The template apply model is not reliable - verify changes manually
4. Keep template changes minimal and focused
5. Use template variables (e.g., {{- $varName := .Field -}}) to avoid scope issues
*/}}

// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package {{ .Package }}

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

{{- range .Enums }}
{{- $enumName := .Name }}
{{- if .Description }}
// {{ .Description }}
{{- end }}
type {{ .Name }} {{ .BaseType }}

const (
{{- range .Values }}
	{{ .Name }} {{ $enumName }} = {{ .Value }}{{- if .Description }} // {{ .Description }}{{- end }}
{{- end }}
)
{{ end }}

{{- range .Structs }}
{{ if .Description -}}
// {{ .Description }}
{{- end }}
type {{ .Name }} struct {
	{{- range .Fields }}
	{{ if .Description -}}
	// {{ .Description }}
	{{- end }}
	{{- .Name }} {{ .Type }} `json:"{{ .JSONName }}{{ if not .IsRequired }},omitempty{{ end }}"` {{- if .IsRequired }} // Required{{- end }}{{- if .DefaultValueComment }} // Default: {{ .DefaultValueComment }}{{- end }}
	{{- end }}
}

// UnmarshalJSON implements json.Unmarshaler
func (x *{{ .Name }}) UnmarshalJSON(data []byte) error {
	// Create an alias to avoid infinite recursion
	type Alias {{ .Name }}
	aux := &struct {
		*Alias
	}{
		Alias: (*Alias)(x),
	}

	// First unmarshal into our alias struct
	if err := json.Unmarshal(data, &aux); err != nil {
		{{- if .HasAllOf }}
		return errors.Errorf("unmarshaling allOf fields: %w", err)
		{{- else }}
		return errors.Errorf("unmarshaling json: %w", err)
		{{- end }}
	}

	{{- if .HasDefaults }}

	// Apply defaults for missing fields
	{{- range .Fields }}
	{{- if .DefaultValue }}
	if x.{{ .Name }} == nil {
		defaultValue := {{ .DefaultValue }}
		x.{{ .Name }} = &defaultValue
	}
	{{- end }}
	{{- end }}
	{{- end }}

	// Validate after unmarshaling
	if err := x.Validate(); err != nil {
		return errors.Errorf("validating after unmarshal: %w", err)
	}

	return nil
}

{{- if not .HasAllOf }}
// Validate ensures all required fields are present and valid
func (x *{{ .Name }}) Validate() error {
	{{- range .Fields }}
	{{- $field := . }}
	{{- range $field.ValidationRules }}
	{{- if eq .Type "required" }}
	if x.{{ $field.Name }} == "" {
		return errors.New("{{ .Message }}")
	}
	{{- else if eq .Type "enum" }}
	if x.{{ $field.Name }} != nil {
		switch *x.{{ $field.Name }} {
		case {{ $field.Values }}:
		default:
			return errors.New("{{ .Message }}")
		}
	}
	{{- else if eq .Type "nested" }}
	if x.{{ $field.Name }} != nil {
		if err := x.{{ $field.Name }}.Validate(); err != nil {
			return errors.Errorf("{{ .Message }}: %w", err)
		}
	}
	{{- end }}
	{{- end }}
	{{- end }}
	return nil
}
{{- else }}
func (x *{{ .Name }}) Validate() error {
	return nil
}
{{- end }}

// MarshalJSON implements json.Marshaler
func (x {{ .Name }}) MarshalJSON() ([]byte, error) {
	{{- if not .HasAllOf }}
	// Validate before marshaling
	if err := x.Validate(); err != nil {
		return nil, errors.Errorf("validating before marshal: %w", err)
	}

	{{- end }}
	// Use alias to avoid infinite recursion
	type Alias {{ .Name }}
	{{- if .HasAllOf }}

	// Marshal the alias struct
	{{- end }}
	return json.Marshal((*Alias)(&x))
}
{{ end }} 