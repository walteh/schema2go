// Code generated by schema2go. DO NOT EDIT.
// üèóÔ∏è Generated from JSON Schema

package {{ .Package }}

import (
	"encoding/json"
	"gitlab.com/tozd/go/errors"
)

{{- range .Structs }}

{{ if .Description -}}
// {{ .Description }}
{{- end }}
type {{ .Name }} struct {
	{{- range .Fields }}
	{{ if .Description -}}
	// {{ .Description }}
	{{- end }}
	{{- .Name }} {{ .Type }} `json:"{{ .JSONName }}{{ if not .IsRequired }},omitempty{{ end }}"` {{- if .IsRequired }} // Required{{- end }}{{- if .DefaultValue }} // Default: {{ .DefaultValue }}{{- end }}
	{{- end }}
}

{{- if .HasDefaults }}

// New{{ .Name }} creates a new {{ .Name }} with default values
func New{{ .Name }}() *{{ .Name }} {
	{{- $fields := .Fields }}
	{{- range $fields }}
	{{- if .DefaultValue }}
	{{ .Name | ToLower }} := {{ .DefaultValue }}
	{{- end }}
	{{- end }}
	return &{{ .Name }}{
		{{- range $fields }}
		{{- if .DefaultValue }}
		{{ .Name }}: &{{ .Name | ToLower }},
		{{- end }}
		{{- end }}
	}
}
{{- end }}

{{- if .HasValidation }}

// Validate ensures all required fields are present and valid
func (x *{{ .Name }}) Validate() error {
	{{- range .Fields }}
	{{- $fieldName := .Name }}
	{{- range .ValidationRules }}
	{{- if eq .Type "required" }}
	if x.{{ $fieldName }} == "" {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- if eq .Type "min" }}
	if x.{{ $fieldName }} < {{ .Value }} {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- if eq .Type "max" }}
	if x.{{ $fieldName }} > {{ .Value }} {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- if eq .Type "pattern" }}
	if !regexp.MustCompile({{ .Value }}).MatchString(x.{{ $fieldName }}) {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- if eq .Type "minLength" }}
	if len(x.{{ $fieldName }}) < {{ .Value }} {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- if eq .Type "maxLength" }}
	if len(x.{{ $fieldName }}) > {{ .Value }} {
		return errors.New("{{ .Message }}")
	}
	{{- end }}
	{{- end }}
	{{- end }}
	return nil
}
{{- end }}

{{- if .HasCustomMarshaling }}

// MarshalJSON implements json.Marshaler
func (x {{ .Name }}) MarshalJSON() ([]byte, error) {
	// TODO: Implement custom marshaling
	return nil, nil
}

// UnmarshalJSON implements json.Unmarshaler
func (x *{{ .Name }}) UnmarshalJSON(data []byte) error {
	// TODO: Implement custom unmarshaling
	return nil
}
{{- end }}

{{- end }} 