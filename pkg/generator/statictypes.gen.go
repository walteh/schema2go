// Code generated by statictypes.go; DO NOT EDIT.

package generator

var _ Schema = &StaticSchema{}

type StaticSchema struct {
	Package_ string
	Structs_ []Struct
	Enums_   []EnumModel
	Imports_ []string
}

// Package implements Schema.
func (b *StaticSchema) Package() string {
	return b.Package_
}

// Structs implements Schema.
func (b *StaticSchema) Structs() []Struct {
	return b.Structs_
}

// Enums implements Schema.
func (b *StaticSchema) Enums() []EnumModel {
	return b.Enums_
}

// Imports implements Schema.
func (b *StaticSchema) Imports() []string {
	return b.Imports_
}

var _ Struct = &StaticStruct{}

type StaticStruct struct {
	Name_                string
	Description_         string
	Fields_              []Field
	HasAllOf_            bool
	HasCustomMarshaling_ bool
	HasDefaults_         bool
	HasValidation_       bool
}

// Name implements Struct.
func (b *StaticStruct) Name() string {
	return b.Name_
}

// Description implements Struct.
func (b *StaticStruct) Description() string {
	return b.Description_
}

// Fields implements Struct.
func (b *StaticStruct) Fields() []Field {
	return b.Fields_
}

// HasAllOf implements Struct.
func (b *StaticStruct) HasAllOf() bool {
	return b.HasAllOf_
}

// HasCustomMarshaling implements Struct.
func (b *StaticStruct) HasCustomMarshaling() bool {
	return b.HasCustomMarshaling_
}

// HasDefaults implements Struct.
func (b *StaticStruct) HasDefaults() bool {
	return b.HasDefaults_
}

// HasValidation implements Struct.
func (b *StaticStruct) HasValidation() bool {
	return b.HasValidation_
}

var _ Field = &StaticField{}

type StaticField struct {
	Name_                string
	JSONName_            string
	Description_         string
	IsRequired_          bool
	Type_                string
	IsEnum_              bool
	EnumTypeName_        string
	EnumValues_          []EnumValue
	DefaultValue_        *string
	DefaultValueComment_ *string
	ValidationRules_     []ValidationRule
}

// Name implements Field.
func (b *StaticField) Name() string {
	return b.Name_
}

// JSONName implements Field.
func (b *StaticField) JSONName() string {
	return b.JSONName_
}

// Description implements Field.
func (b *StaticField) Description() string {
	return b.Description_
}

// IsRequired implements Field.
func (b *StaticField) IsRequired() bool {
	return b.IsRequired_
}

// Type implements Field.
func (b *StaticField) Type() string {
	return b.Type_
}

// IsEnum implements Field.
func (b *StaticField) IsEnum() bool {
	return b.IsEnum_
}

// EnumTypeName implements Field.
func (b *StaticField) EnumTypeName() string {
	return b.EnumTypeName_
}

// EnumValues implements Field.
func (b *StaticField) EnumValues() []EnumValue {
	return b.EnumValues_
}

// DefaultValue implements Field.
func (b *StaticField) DefaultValue() *string {
	return b.DefaultValue_
}

// DefaultValueComment implements Field.
func (b *StaticField) DefaultValueComment() *string {
	return b.DefaultValueComment_
}

// ValidationRules implements Field.
func (b *StaticField) ValidationRules() []ValidationRule {
	return b.ValidationRules_
}

func NewStaticSchema(impl Schema) *StaticSchema {
	stat := &StaticSchema{}

	stat.Package_ = impl.Package()

	stat.Structs_ = make([]Struct, len(impl.Structs()))
	for i, item := range impl.Structs() {
		stat.Structs_[i] = NewStaticStruct(item)
	}

	stat.Enums_ = impl.Enums()

	stat.Imports_ = impl.Imports()

	return stat
}

func NewStaticStruct(impl Struct) *StaticStruct {
	stat := &StaticStruct{}

	stat.Name_ = impl.Name()

	stat.Description_ = impl.Description()

	stat.Fields_ = make([]Field, len(impl.Fields()))
	for i, item := range impl.Fields() {
		stat.Fields_[i] = NewStaticField(item)
	}

	stat.HasAllOf_ = impl.HasAllOf()

	stat.HasCustomMarshaling_ = impl.HasCustomMarshaling()

	stat.HasDefaults_ = impl.HasDefaults()

	stat.HasValidation_ = impl.HasValidation()

	return stat
}

func NewStaticField(impl Field) *StaticField {
	stat := &StaticField{}

	stat.Name_ = impl.Name()

	stat.JSONName_ = impl.JSONName()

	stat.Description_ = impl.Description()

	stat.IsRequired_ = impl.IsRequired()

	stat.Type_ = impl.Type()

	stat.IsEnum_ = impl.IsEnum()

	stat.EnumTypeName_ = impl.EnumTypeName()

	stat.EnumValues_ = impl.EnumValues()

	stat.DefaultValue_ = impl.DefaultValue()

	stat.DefaultValueComment_ = impl.DefaultValueComment()

	stat.ValidationRules_ = impl.ValidationRules()

	return stat
}
