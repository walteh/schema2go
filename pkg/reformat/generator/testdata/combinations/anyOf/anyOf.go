// Code generated by github.com/walteh/schema2go, DO NOT EDIT.

package test

import (
	"encoding/json"
	"fmt"
)

// Root represents the root schema
type Root struct {
	// An identifier that can be either a string or an integer
	Identifier IdentifierAnyOf `json:"identifier"`
	// Status can be either a complex object or a simple string enum
	Status *StatusAnyOf `json:"status,omitempty"`
}

// IdentifierAnyOf represents a type that can be either a string or an integer
type IdentifierAnyOf struct {
	StringValue  *string
	IntegerValue *int64
}

// UnmarshalJSON implements json.Unmarshaler
func (a *IdentifierAnyOf) UnmarshalJSON(data []byte) error {
	// Try string
	var str string
	if err := json.Unmarshal(data, &str); err == nil {
		a.StringValue = &str
		return nil
	}

	// Try integer
	var num int64
	if err := json.Unmarshal(data, &num); err == nil {
		a.IntegerValue = &num
		return nil
	}

	return fmt.Errorf("value must be either a string or an integer")
}

// MarshalJSON implements json.Marshaler
func (a IdentifierAnyOf) MarshalJSON() ([]byte, error) {
	if a.StringValue != nil {
		return json.Marshal(a.StringValue)
	}
	if a.IntegerValue != nil {
		return json.Marshal(a.IntegerValue)
	}
	return nil, fmt.Errorf("no valid value set")
}

// StatusAnyOf represents a type that can be either a StatusObject or a StatusEnum
type StatusAnyOf struct {
	ObjectValue *StatusObject
	EnumValue   *StatusEnum
}

// StatusObject represents the object variant of Status
type StatusObject struct {
	Code    int64   `json:"code"`
	Message *string `json:"message,omitempty"`
}

// StatusEnum represents the enum variant of Status
type StatusEnum string

const (
	StatusEnumPending  StatusEnum = "pending"
	StatusEnumActive   StatusEnum = "active"
	StatusEnumInactive StatusEnum = "inactive"
)

// UnmarshalJSON implements json.Unmarshaler
func (a *StatusAnyOf) UnmarshalJSON(data []byte) error {
	// Try object
	var obj StatusObject
	if err := json.Unmarshal(data, &obj); err == nil {
		a.ObjectValue = &obj
		return nil
	}

	// Try enum
	var enum StatusEnum
	if err := json.Unmarshal(data, &enum); err == nil {
		if enum == StatusEnumPending || enum == StatusEnumActive || enum == StatusEnumInactive {
			a.EnumValue = &enum
			return nil
		}
	}

	return fmt.Errorf("value must be either a status object or one of: pending, active, inactive")
}

// MarshalJSON implements json.Marshaler
func (a StatusAnyOf) MarshalJSON() ([]byte, error) {
	if a.ObjectValue != nil {
		return json.Marshal(a.ObjectValue)
	}
	if a.EnumValue != nil {
		return json.Marshal(a.EnumValue)
	}
	return nil, fmt.Errorf("no valid value set")
} 